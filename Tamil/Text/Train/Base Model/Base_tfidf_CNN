{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"gpuType":"T4","mount_file_id":"1wc-P1jxrEj17SaktanKMKBkWbj-LV-Rg","authorship_tag":"ABX9TyPGPNIVAWJjn3C+j8L3obyR"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"},"accelerator":"GPU"},"cells":[{"cell_type":"code","source":["!pip install tensorflow"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"collapsed":true,"id":"QT76MvPvobmC","executionInfo":{"status":"ok","timestamp":1735202604179,"user_tz":-330,"elapsed":10715,"user":{"displayName":"SHAHIDKHAN S 22ADR099","userId":"04241991466908434314"}},"outputId":"14d45ca5-4569-49e7-a2dd-5039b2d803a7"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Requirement already satisfied: tensorflow in /usr/local/lib/python3.10/dist-packages (2.17.1)\n","Requirement already satisfied: absl-py>=1.0.0 in /usr/local/lib/python3.10/dist-packages (from tensorflow) (1.4.0)\n","Requirement already satisfied: astunparse>=1.6.0 in /usr/local/lib/python3.10/dist-packages (from tensorflow) (1.6.3)\n","Requirement already satisfied: flatbuffers>=24.3.25 in /usr/local/lib/python3.10/dist-packages (from tensorflow) (24.3.25)\n","Requirement already satisfied: gast!=0.5.0,!=0.5.1,!=0.5.2,>=0.2.1 in /usr/local/lib/python3.10/dist-packages (from tensorflow) (0.6.0)\n","Requirement already satisfied: google-pasta>=0.1.1 in /usr/local/lib/python3.10/dist-packages (from tensorflow) (0.2.0)\n","Requirement already satisfied: h5py>=3.10.0 in /usr/local/lib/python3.10/dist-packages (from tensorflow) (3.12.1)\n","Requirement already satisfied: libclang>=13.0.0 in /usr/local/lib/python3.10/dist-packages (from tensorflow) (18.1.1)\n","Requirement already satisfied: ml-dtypes<0.5.0,>=0.3.1 in /usr/local/lib/python3.10/dist-packages (from tensorflow) (0.4.1)\n","Requirement already satisfied: opt-einsum>=2.3.2 in /usr/local/lib/python3.10/dist-packages (from tensorflow) (3.4.0)\n","Requirement already satisfied: packaging in /usr/local/lib/python3.10/dist-packages (from tensorflow) (24.2)\n","Requirement already satisfied: protobuf!=4.21.0,!=4.21.1,!=4.21.2,!=4.21.3,!=4.21.4,!=4.21.5,<5.0.0dev,>=3.20.3 in /usr/local/lib/python3.10/dist-packages (from tensorflow) (4.25.5)\n","Requirement already satisfied: requests<3,>=2.21.0 in /usr/local/lib/python3.10/dist-packages (from tensorflow) (2.32.3)\n","Requirement already satisfied: setuptools in /usr/local/lib/python3.10/dist-packages (from tensorflow) (75.1.0)\n","Requirement already satisfied: six>=1.12.0 in /usr/local/lib/python3.10/dist-packages (from tensorflow) (1.17.0)\n","Requirement already satisfied: termcolor>=1.1.0 in /usr/local/lib/python3.10/dist-packages (from tensorflow) (2.5.0)\n","Requirement already satisfied: typing-extensions>=3.6.6 in /usr/local/lib/python3.10/dist-packages (from tensorflow) (4.12.2)\n","Requirement already satisfied: wrapt>=1.11.0 in /usr/local/lib/python3.10/dist-packages (from tensorflow) (1.17.0)\n","Requirement already satisfied: grpcio<2.0,>=1.24.3 in /usr/local/lib/python3.10/dist-packages (from tensorflow) (1.68.1)\n","Requirement already satisfied: tensorboard<2.18,>=2.17 in /usr/local/lib/python3.10/dist-packages (from tensorflow) (2.17.1)\n","Requirement already satisfied: keras>=3.2.0 in /usr/local/lib/python3.10/dist-packages (from tensorflow) (3.5.0)\n","Requirement already satisfied: tensorflow-io-gcs-filesystem>=0.23.1 in /usr/local/lib/python3.10/dist-packages (from tensorflow) (0.37.1)\n","Requirement already satisfied: numpy<2.0.0,>=1.23.5 in /usr/local/lib/python3.10/dist-packages (from tensorflow) (1.26.4)\n","Requirement already satisfied: wheel<1.0,>=0.23.0 in /usr/local/lib/python3.10/dist-packages (from astunparse>=1.6.0->tensorflow) (0.45.1)\n","Requirement already satisfied: rich in /usr/local/lib/python3.10/dist-packages (from keras>=3.2.0->tensorflow) (13.9.4)\n","Requirement already satisfied: namex in /usr/local/lib/python3.10/dist-packages (from keras>=3.2.0->tensorflow) (0.0.8)\n","Requirement already satisfied: optree in /usr/local/lib/python3.10/dist-packages (from keras>=3.2.0->tensorflow) (0.13.1)\n","Requirement already satisfied: charset-normalizer<4,>=2 in /usr/local/lib/python3.10/dist-packages (from requests<3,>=2.21.0->tensorflow) (3.4.0)\n","Requirement already satisfied: idna<4,>=2.5 in /usr/local/lib/python3.10/dist-packages (from requests<3,>=2.21.0->tensorflow) (3.10)\n","Requirement already satisfied: urllib3<3,>=1.21.1 in /usr/local/lib/python3.10/dist-packages (from requests<3,>=2.21.0->tensorflow) (2.2.3)\n","Requirement already satisfied: certifi>=2017.4.17 in /usr/local/lib/python3.10/dist-packages (from requests<3,>=2.21.0->tensorflow) (2024.12.14)\n","Requirement already satisfied: markdown>=2.6.8 in /usr/local/lib/python3.10/dist-packages (from tensorboard<2.18,>=2.17->tensorflow) (3.7)\n","Requirement already satisfied: tensorboard-data-server<0.8.0,>=0.7.0 in /usr/local/lib/python3.10/dist-packages (from tensorboard<2.18,>=2.17->tensorflow) (0.7.2)\n","Requirement already satisfied: werkzeug>=1.0.1 in /usr/local/lib/python3.10/dist-packages (from tensorboard<2.18,>=2.17->tensorflow) (3.1.3)\n","Requirement already satisfied: MarkupSafe>=2.1.1 in /usr/local/lib/python3.10/dist-packages (from werkzeug>=1.0.1->tensorboard<2.18,>=2.17->tensorflow) (3.0.2)\n","Requirement already satisfied: markdown-it-py>=2.2.0 in /usr/local/lib/python3.10/dist-packages (from rich->keras>=3.2.0->tensorflow) (3.0.0)\n","Requirement already satisfied: pygments<3.0.0,>=2.13.0 in /usr/local/lib/python3.10/dist-packages (from rich->keras>=3.2.0->tensorflow) (2.18.0)\n","Requirement already satisfied: mdurl~=0.1 in /usr/local/lib/python3.10/dist-packages (from markdown-it-py>=2.2.0->rich->keras>=3.2.0->tensorflow) (0.1.2)\n"]}]},{"cell_type":"code","source":["!pip install keras-tuner"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"collapsed":true,"id":"xDtszWctomlc","executionInfo":{"status":"ok","timestamp":1735202618643,"user_tz":-330,"elapsed":14468,"user":{"displayName":"SHAHIDKHAN S 22ADR099","userId":"04241991466908434314"}},"outputId":"83013a47-8c4c-47cc-d833-d4638d753d03"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Collecting keras-tuner\n","  Downloading keras_tuner-1.4.7-py3-none-any.whl.metadata (5.4 kB)\n","Requirement already satisfied: keras in /usr/local/lib/python3.10/dist-packages (from keras-tuner) (3.5.0)\n","Requirement already satisfied: packaging in /usr/local/lib/python3.10/dist-packages (from keras-tuner) (24.2)\n","Requirement already satisfied: requests in /usr/local/lib/python3.10/dist-packages (from keras-tuner) (2.32.3)\n","Collecting kt-legacy (from keras-tuner)\n","  Downloading kt_legacy-1.0.5-py3-none-any.whl.metadata (221 bytes)\n","Requirement already satisfied: absl-py in /usr/local/lib/python3.10/dist-packages (from keras->keras-tuner) (1.4.0)\n","Requirement already satisfied: numpy in /usr/local/lib/python3.10/dist-packages (from keras->keras-tuner) (1.26.4)\n","Requirement already satisfied: rich in /usr/local/lib/python3.10/dist-packages (from keras->keras-tuner) (13.9.4)\n","Requirement already satisfied: namex in /usr/local/lib/python3.10/dist-packages (from keras->keras-tuner) (0.0.8)\n","Requirement already satisfied: h5py in /usr/local/lib/python3.10/dist-packages (from keras->keras-tuner) (3.12.1)\n","Requirement already satisfied: optree in /usr/local/lib/python3.10/dist-packages (from keras->keras-tuner) (0.13.1)\n","Requirement already satisfied: ml-dtypes in /usr/local/lib/python3.10/dist-packages (from keras->keras-tuner) (0.4.1)\n","Requirement already satisfied: charset-normalizer<4,>=2 in /usr/local/lib/python3.10/dist-packages (from requests->keras-tuner) (3.4.0)\n","Requirement already satisfied: idna<4,>=2.5 in /usr/local/lib/python3.10/dist-packages (from requests->keras-tuner) (3.10)\n","Requirement already satisfied: urllib3<3,>=1.21.1 in /usr/local/lib/python3.10/dist-packages (from requests->keras-tuner) (2.2.3)\n","Requirement already satisfied: certifi>=2017.4.17 in /usr/local/lib/python3.10/dist-packages (from requests->keras-tuner) (2024.12.14)\n","Requirement already satisfied: typing-extensions>=4.5.0 in /usr/local/lib/python3.10/dist-packages (from optree->keras->keras-tuner) (4.12.2)\n","Requirement already satisfied: markdown-it-py>=2.2.0 in /usr/local/lib/python3.10/dist-packages (from rich->keras->keras-tuner) (3.0.0)\n","Requirement already satisfied: pygments<3.0.0,>=2.13.0 in /usr/local/lib/python3.10/dist-packages (from rich->keras->keras-tuner) (2.18.0)\n","Requirement already satisfied: mdurl~=0.1 in /usr/local/lib/python3.10/dist-packages (from markdown-it-py>=2.2.0->rich->keras->keras-tuner) (0.1.2)\n","Downloading keras_tuner-1.4.7-py3-none-any.whl (129 kB)\n","\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m129.1/129.1 kB\u001b[0m \u001b[31m3.9 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25hDownloading kt_legacy-1.0.5-py3-none-any.whl (9.6 kB)\n","Installing collected packages: kt-legacy, keras-tuner\n","Successfully installed keras-tuner-1.4.7 kt-legacy-1.0.5\n"]}]},{"cell_type":"code","source":["import pandas as pd\n","from sklearn.model_selection import train_test_split\n","from sklearn.metrics import classification_report, confusion_matrix, precision_recall_fscore_support\n","from sklearn.feature_extraction.text import TfidfVectorizer\n","import matplotlib.pyplot as plt\n","import seaborn as sns\n","from tensorflow.keras.models import Sequential\n","from tensorflow.keras.layers import Dense, Dropout, Conv1D, MaxPooling1D, Flatten, Embedding\n","from tensorflow.keras.callbacks import EarlyStopping\n","from tensorflow.keras.utils import to_categorical\n","\n","# Load dataset\n","dataset_path = '/content/drive/MyDrive/Dravidian-2025/Tamil/Text/Preprocessed Text/processed_train_data.csv'\n","df = pd.read_csv(dataset_path)\n","\n","X = df['Text']\n","y = pd.get_dummies(df['Label']).values\n","\n","X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42, stratify=df['Label'])\n","\n","# Text Vectorization using TF-IDF\n","tfidf_vectorizer = TfidfVectorizer(max_features=20000, ngram_range=(1, 2))  # Using TF-IDF\n","X_train_tfidf = tfidf_vectorizer.fit_transform(X_train).toarray()\n","X_test_tfidf = tfidf_vectorizer.transform(X_test).toarray()\n","\n","# CNN Model\n","def create_cnn_model(input_dim, dropout_rate):\n","    model = Sequential([\n","        # No embedding, directly use the count vector\n","        Conv1D(filters=128, kernel_size=3, activation='relu', padding='same', input_shape=(input_dim, 1)),\n","        MaxPooling1D(pool_size=2),\n","        Dropout(dropout_rate),\n","\n","        # Additional convolutional layer (optional)\n","        Conv1D(filters=64, kernel_size=3, activation='relu', padding='same'),\n","        MaxPooling1D(pool_size=2),\n","        Dropout(dropout_rate),\n","\n","        # Flatten the output\n","        Flatten(),\n","\n","        # Fully connected layers\n","        Dense(128, activation='relu'),\n","        Dropout(dropout_rate),\n","        Dense(64, activation='relu'),\n","        Dropout(dropout_rate),\n","\n","        # Output layer for multi-class classification\n","        Dense(y.shape[1], activation='softmax')\n","    ])\n","    model.compile(optimizer='adam', loss='categorical_crossentropy', metrics=['accuracy'])\n","    return model\n","\n","\n","dropout_rate = 0.5\n","batch_size = 32\n","epochs = 20\n","input_dim = X_train_tfidf.shape[1]  # Number of features from TF-IDF\n","\n","# Create CNN model\n","model = create_cnn_model(input_dim, dropout_rate)\n","\n","# Train the model\n","history = model.fit(\n","    X_train_tfidf, y_train,\n","    validation_split=0.2,\n","    epochs=epochs,\n","    batch_size=batch_size,\n","    verbose=2,\n","    callbacks=[EarlyStopping(monitor='val_loss', patience=3, restore_best_weights=True)]\n",")\n","\n","# Evaluate the model on the test set\n","test_loss, test_accuracy = model.evaluate(X_test_tfidf, y_test, verbose=2)\n","print(f\"Test Accuracy: {test_accuracy:.4f}\")\n","print(f\"Test Loss: {test_loss:.4f}\")\n","\n","# Make predictions on the test set\n","y_pred = model.predict(X_test_tfidf)\n","y_pred_labels = y_pred.argmax(axis=1)\n","y_true_labels = y_test.argmax(axis=1)\n","\n","print(\"CNN Model Classification Report:\\n\", classification_report(y_true_labels, y_pred_labels))\n","\n","# Plot Confusion Matrix\n","conf_matrix = confusion_matrix(y_true_labels, y_pred_labels)\n","plt.figure(figsize=(6, 5))\n","sns.heatmap(conf_matrix, annot=True, fmt=\"d\", cmap=\"Blues\", cbar=True)\n","plt.title(\"Confusion Matrix\")\n","plt.xlabel(\"Predicted\")\n","plt.ylabel(\"True\")\n","plt.show()\n","\n","# Calculate Macro Precision, Recall, and F1 Score\n","macro_precision, macro_recall, macro_f1, _ = precision_recall_fscore_support(\n","    y_true_labels, y_pred_labels, average=\"macro\"\n",")\n","\n","# Print Macro F1 Score\n","print(f\"Macro F1 Score: {macro_f1:.4f}\")\n","\n","metrics = [\"Macro Precision\", \"Macro Recall\", \"Macro F1-Score\"]\n","values = [macro_precision, macro_recall, macro_f1]\n","\n","plt.figure(figsize=(8, 5))\n","sns.barplot(x=metrics, y=values, palette=\"viridis\")\n","plt.title(\"Macro-Averaged Metrics\")\n","plt.ylabel(\"Score\")\n","plt.ylim(0, 1)\n","plt.grid(axis=\"y\")\n","plt.show()\n","\n","# Process new test data\n","test_dataset_path = '/content/drive/MyDrive/Dravidian-2025/Tamil/Text/Preprocessed Text/processed_test_data.csv'\n","test_df = pd.read_csv(test_dataset_path)\n","\n","X_test_new = test_df['Transcript']\n","\n","# Transform new test data using the same TF-IDF Vectorizer\n","X_test_new_tfidf = tfidf_vectorizer.transform(X_test_new).toarray()\n","\n","# Predict using the CNN model\n","y_pred_new = model.predict(X_test_new_tfidf)\n","y_pred_labels_new = y_pred_new.argmax(axis=1)\n","\n","# Map the predicted labels to original label names\n","label_columns = pd.get_dummies(df['Label']).columns\n","predicted_labels = label_columns[y_pred_labels_new]\n","\n","# Add predictions to the test dataframe\n","test_df['CNN'] = predicted_labels\n","\n","# Save the predictions to a CSV file\n","output_path = '/content/drive/MyDrive/Dravidian-2025/Tamil/Text/Test-Output/Base Model/base_tfidf_CNN_predictions'\n","test_df[['Transcript', 'CNN']].to_csv(output_path, index=False)\n","\n","print(f\"Predictions saved to: {output_path}\")\n"],"metadata":{"id":"QijeaAtWr_3V","executionInfo":{"status":"ok","timestamp":1735204148236,"user_tz":-330,"elapsed":23393,"user":{"displayName":"SHAHIDKHAN S 22ADR099","userId":"04241991466908434314"}},"colab":{"base_uri":"https://localhost:8080/","height":1000},"outputId":"c58f9345-a4d8-4833-9dc5-5efab969fa98"},"execution_count":3,"outputs":[{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.10/dist-packages/keras/src/layers/convolutional/base_conv.py:107: UserWarning: Do not pass an `input_shape`/`input_dim` argument to a layer. When using Sequential models, prefer using an `Input(shape)` object as the first layer in the model instead.\n","  super().__init__(activity_regularizer=activity_regularizer, **kwargs)\n"]},{"output_type":"stream","name":"stdout","text":["Epoch 1/20\n","29/29 - 10s - 354ms/step - accuracy: 0.2778 - loss: 1.5712 - val_accuracy: 0.7435 - val_loss: 1.4123\n","Epoch 2/20\n","29/29 - 2s - 83ms/step - accuracy: 0.6242 - loss: 0.9901 - val_accuracy: 0.8652 - val_loss: 0.4132\n","Epoch 3/20\n","29/29 - 1s - 35ms/step - accuracy: 0.8584 - loss: 0.4235 - val_accuracy: 0.9130 - val_loss: 0.2648\n","Epoch 4/20\n","29/29 - 1s - 36ms/step - accuracy: 0.9172 - loss: 0.2304 - val_accuracy: 0.9304 - val_loss: 0.2281\n","Epoch 5/20\n","29/29 - 1s - 43ms/step - accuracy: 0.9423 - loss: 0.1728 - val_accuracy: 0.9478 - val_loss: 0.1779\n","Epoch 6/20\n","29/29 - 1s - 32ms/step - accuracy: 0.9619 - loss: 0.1092 - val_accuracy: 0.9478 - val_loss: 0.2190\n","Epoch 7/20\n","29/29 - 1s - 32ms/step - accuracy: 0.9728 - loss: 0.1041 - val_accuracy: 0.9478 - val_loss: 0.2301\n","Epoch 8/20\n","29/29 - 1s - 33ms/step - accuracy: 0.9728 - loss: 0.0840 - val_accuracy: 0.9348 - val_loss: 0.2572\n","9/9 - 0s - 49ms/step - accuracy: 0.9338 - loss: 0.2162\n","Test Accuracy: 0.9338\n","Test Loss: 0.2162\n","\u001b[1m9/9\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 30ms/step\n","CNN Model Classification Report:\n","               precision    recall  f1-score   support\n","\n","           0       0.96      0.88      0.92        58\n","           1       0.91      0.93      0.92        57\n","           2       0.85      0.91      0.88        57\n","           3       0.98      1.00      0.99        58\n","           4       0.96      0.95      0.96        57\n","\n","    accuracy                           0.93       287\n","   macro avg       0.94      0.93      0.93       287\n","weighted avg       0.94      0.93      0.93       287\n","\n"]},{"output_type":"display_data","data":{"text/plain":["<Figure size 600x500 with 2 Axes>"],"image/png":"\n"},"metadata":{}},{"output_type":"stream","name":"stdout","text":["Macro F1 Score: 0.9338\n"]},{"output_type":"stream","name":"stderr","text":["<ipython-input-3-f7aeaae2f312>:106: FutureWarning: \n","\n","Passing `palette` without assigning `hue` is deprecated and will be removed in v0.14.0. Assign the `x` variable to `hue` and set `legend=False` for the same effect.\n","\n","  sns.barplot(x=metrics, y=values, palette=\"viridis\")\n"]},{"output_type":"display_data","data":{"text/plain":["<Figure size 800x500 with 1 Axes>"],"image/png":"\n"},"metadata":{}},{"output_type":"stream","name":"stdout","text":["\u001b[1m2/2\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 300ms/step\n","Predictions saved to: /content/drive/MyDrive/Dravidian-2025/Tamil/Text/Test-Output/Base Model/base_tfidf_CNN_predictions\n"]}]}]}