{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[]},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":996},"collapsed":true,"id":"PvKrBOP3qm45","executionInfo":{"status":"ok","timestamp":1736488410613,"user_tz":-330,"elapsed":37909,"user":{"displayName":"SHAHIDKHAN S 22ADR099","userId":"04241991466908434314"}},"outputId":"7a15fb5d-cf5a-4934-e76c-3a11a6dc6610"},"outputs":[{"output_type":"stream","name":"stdout","text":["Train Accuracy: 0.9942\n","Test Accuracy: 0.6163\n","Classification Report:\n","              precision    recall  f1-score   support\n","\n","           C       0.00      0.00      0.00        11\n","           G       0.43      0.27      0.33        11\n","           N       0.66      0.91      0.76        46\n","           P       0.00      0.00      0.00         7\n","           R       0.62      0.73      0.67        11\n","\n","    accuracy                           0.62        86\n","   macro avg       0.34      0.38      0.35        86\n","weighted avg       0.48      0.62      0.54        86\n","\n"]},{"output_type":"display_data","data":{"text/plain":["<Figure size 1000x800 with 2 Axes>"],"image/png":"\n"},"metadata":{}},{"output_type":"stream","name":"stdout","text":["Predictions saved to /content/tamil_audio_predictions_basicml_models.csv\n"]}],"source":["import os\n","import librosa\n","import zipfile\n","import numpy as np\n","import pandas as pd\n","from sklearn.preprocessing import LabelEncoder, StandardScaler\n","from sklearn.model_selection import train_test_split, GridSearchCV\n","from sklearn.ensemble import RandomForestClassifier\n","from sklearn.metrics import accuracy_score, classification_report, confusion_matrix, f1_score\n","import matplotlib.pyplot as plt\n","import seaborn as sns\n","\n","# Define the paths\n","train_zip_path = '/content/drive/MyDrive/Dravidian-2025/Tamil/Audio/Preprocessed Audio/tamil_train_audio_preprocessed4.zip'\n","train_extract_path = '/content/train_audio_preprocessed4'\n","test_zip_path = '/content/drive/MyDrive/Dravidian-2025/Tamil/Audio/Preprocessed Audio/tamil_finaled_test_audio_preprocessed4.zip'\n","test_extract_path = '/content/extracted_test_audio'\n","output_file = '/content/tamil_audio_predictions_basicml_models.csv'\n","\n","# Unzip train dataset\n","if not os.path.exists(train_extract_path):\n","    with zipfile.ZipFile(train_zip_path, 'r') as zip_ref:\n","        zip_ref.extractall(train_extract_path)\n","\n","# Unzip test dataset\n","if not os.path.exists(test_extract_path):\n","    with zipfile.ZipFile(test_zip_path, 'r') as zip_ref:\n","        zip_ref.extractall(test_extract_path)\n","\n","# Helper functions\n","def extract_class_from_file(file_name):\n","    \"\"\"Extracts class label from file name based on naming convention.\"\"\"\n","    parts = file_name.split('_')\n","    if len(parts) >= 4:\n","        class_label = parts[3]\n","        if class_label in ['G', 'P', 'R', 'C', 'N']:\n","            return class_label\n","    return None\n","\n","def extract_features(file_path):\n","    \"\"\"Extract audio features from a file.\"\"\"\n","    try:\n","        y, sr = librosa.load(file_path, sr=None)\n","        mfcc = librosa.feature.mfcc(y=y, sr=sr, n_mfcc=13)\n","        spectral_contrast = librosa.feature.spectral_contrast(y=y, sr=sr)\n","        features = np.concatenate((\n","            np.mean(mfcc, axis=1),\n","            np.mean(spectral_contrast, axis=1)\n","        ))\n","        return features\n","    except Exception as e:\n","        print(f\"Error processing file {file_path}: {e}\")\n","        return np.zeros(20)  # Return a zero vector if an error occurs\n","\n","# Load train files\n","train_files = os.listdir(train_extract_path)\n","labels, features = [], []\n","for file_name in train_files:\n","    if file_name.endswith('.wav'):\n","        file_path = os.path.join(train_extract_path, file_name)\n","        class_label = extract_class_from_file(file_name)\n","        if class_label:\n","            labels.append(class_label)\n","            features.append(extract_features(file_path))\n","\n","# Prepare dataset\n","X = np.array(features)\n","y = np.array(labels)\n","label_encoder = LabelEncoder()\n","y = label_encoder.fit_transform(y)\n","scaler = StandardScaler()\n","X = scaler.fit_transform(X)\n","\n","# Train-test split\n","X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, stratify=y, random_state=42)\n","\n","# Model training and hyperparameter tuning\n","param_grid = {\n","    'n_estimators': [50, 100, 200],\n","    'max_depth': [None, 10, 20],\n","    'min_samples_split': [2, 5, 10]\n","}\n","rf = RandomForestClassifier(random_state=42)\n","grid_search = GridSearchCV(rf, param_grid, cv=3, scoring='accuracy', n_jobs=-1)\n","grid_search.fit(X_train, y_train)\n","best_rf_model = grid_search.best_estimator_\n","\n","# Evaluate model\n","y_train_pred = best_rf_model.predict(X_train)\n","y_test_pred = best_rf_model.predict(X_test)\n","print(f\"Train Accuracy: {accuracy_score(y_train, y_train_pred):.4f}\")\n","print(f\"Test Accuracy: {accuracy_score(y_test, y_test_pred):.4f}\")\n","print(\"Classification Report:\")\n","print(classification_report(y_test, y_test_pred, target_names=label_encoder.classes_))\n","\n","# Confusion matrix\n","conf_matrix = confusion_matrix(y_test, y_test_pred)\n","plt.figure(figsize=(10, 8))\n","sns.heatmap(conf_matrix, annot=True, fmt='d', cmap='Blues', xticklabels=label_encoder.classes_, yticklabels=label_encoder.classes_)\n","plt.title(\"Confusion Matrix\")\n","plt.xlabel(\"Predicted\")\n","plt.ylabel(\"Actual\")\n","plt.show()\n","\n","# Load test files\n","final_features = []\n","test_files = os.listdir(test_extract_path)\n","for file_name in test_files:\n","    if file_name.endswith('.wav'):\n","        file_path = os.path.join(test_extract_path, file_name)\n","        final_features.append(extract_features(file_path))\n","\n","X_test_final = np.array(final_features)\n","X_test_final = scaler.transform(X_test_final)\n","\n","test_predictions = best_rf_model.predict(X_test_final)\n","decoded_predictions = label_encoder.inverse_transform(test_predictions)\n","\n","# Save predictions\n","predictions_df = pd.DataFrame({\n","    'File Name': test_files,\n","    'Prediction': decoded_predictions\n","})\n","predictions_df.to_csv(output_file, index=False)\n","print(f\"Predictions saved to {output_file}\")\n"]},{"cell_type":"code","source":["import os\n","import librosa\n","import zipfile\n","import numpy as np\n","import pandas as pd\n","from sklearn.preprocessing import LabelEncoder, StandardScaler\n","from sklearn.model_selection import train_test_split, GridSearchCV\n","from sklearn.linear_model import PassiveAggressiveClassifier\n","from sklearn.metrics import accuracy_score, classification_report, confusion_matrix, f1_score\n","import matplotlib.pyplot as plt\n","import seaborn as sns\n","\n","# Define the paths\n","train_zip_path = '/content/drive/MyDrive/Dravidian-2025/Tamil/Audio/Preprocessed Audio/tamil_train_audio_preprocessed4.zip'\n","train_extract_path = '/content/train_audio_preprocessed4'\n","test_zip_path = '/content/drive/MyDrive/Dravidian-2025/Tamil/Audio/Preprocessed Audio/tamil_finaled_test_audio_preprocessed4.zip'\n","test_extract_path = '/content/extracted_test_audio'\n","output_file = '/content/tamil_audio_predictions_pr_models.csv'\n","\n","# Unzip train dataset\n","if not os.path.exists(train_extract_path):\n","    with zipfile.ZipFile(train_zip_path, 'r') as zip_ref:\n","        zip_ref.extractall(train_extract_path)\n","\n","# Unzip test dataset\n","if not os.path.exists(test_extract_path):\n","    with zipfile.ZipFile(test_zip_path, 'r') as zip_ref:\n","        zip_ref.extractall(test_extract_path)\n","\n","# Helper functions\n","def extract_class_from_file(file_name):\n","    \"\"\"Extracts class label from file name based on naming convention.\"\"\"\n","    parts = file_name.split('_')\n","    if len(parts) >= 4:\n","        class_label = parts[3]\n","        if class_label in ['G', 'P', 'R', 'C', 'N']:\n","            return class_label\n","    return None\n","\n","def extract_features(file_path):\n","    \"\"\"Extract audio features from a file.\"\"\"\n","    try:\n","        y, sr = librosa.load(file_path, sr=None)\n","        mfcc = librosa.feature.mfcc(y=y, sr=sr, n_mfcc=13)\n","        spectral_contrast = librosa.feature.spectral_contrast(y=y, sr=sr)\n","        features = np.concatenate((np.mean(mfcc, axis=1), np.mean(spectral_contrast, axis=1)))\n","        return features\n","    except Exception as e:\n","        print(f\"Error processing file {file_path}: {e}\")\n","        return np.zeros(20)  # Return a zero vector if an error occurs\n","\n","# Load train files\n","train_files = os.listdir(train_extract_path)\n","labels, features = [], []\n","for file_name in train_files:\n","    if file_name.endswith('.wav'):\n","        file_path = os.path.join(train_extract_path, file_name)\n","        class_label = extract_class_from_file(file_name)\n","        if class_label:\n","            labels.append(class_label)\n","            features.append(extract_features(file_path))\n","\n","# Prepare dataset\n","X = np.array(features)\n","y = np.array(labels)\n","label_encoder = LabelEncoder()\n","y = label_encoder.fit_transform(y)\n","scaler = StandardScaler()\n","X = scaler.fit_transform(X)\n","\n","# Train-test split\n","X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, stratify=y, random_state=42)\n","\n","# Model training and hyperparameter tuning for Passive-Aggressive Classifier\n","param_grid = {\n","    'C': [0.1, 1, 10],  # Regularization parameter\n","    'max_iter': [50, 100, 200],  # Number of iterations\n","}\n","pac = PassiveAggressiveClassifier(random_state=42)\n","grid_search = GridSearchCV(pac, param_grid, cv=3, scoring='accuracy', n_jobs=-1)\n","grid_search.fit(X_train, y_train)\n","best_pac_model = grid_search.best_estimator_\n","\n","# Evaluate model\n","y_train_pred = best_pac_model.predict(X_train)\n","y_test_pred = best_pac_model.predict(X_test)\n","print(f\"Train Accuracy: {accuracy_score(y_train, y_train_pred):.4f}\")\n","print(f\"Test Accuracy: {accuracy_score(y_test, y_test_pred):.4f}\")\n","print(\"Classification Report:\")\n","print(classification_report(y_test, y_test_pred, target_names=label_encoder.classes_))\n","\n","# Confusion matrix\n","conf_matrix = confusion_matrix(y_test, y_test_pred)\n","plt.figure(figsize=(10, 8))\n","sns.heatmap(conf_matrix, annot=True, fmt='d', cmap='Blues', xticklabels=label_encoder.classes_, yticklabels=label_encoder.classes_)\n","plt.title(\"Confusion Matrix\")\n","plt.xlabel(\"Predicted\")\n","plt.ylabel(\"Actual\")\n","plt.show()\n","\n","# Load test files\n","final_features = []\n","test_files = os.listdir(test_extract_path)\n","for file_name in test_files:\n","    if file_name.endswith('.wav'):\n","        file_path = os.path.join(test_extract_path, file_name)\n","        final_features.append(extract_features(file_path))\n","\n","X_test_final = np.array(final_features)\n","X_test_final = scaler.transform(X_test_final)\n","\n","test_predictions = best_pac_model.predict(X_test_final)\n","decoded_predictions = label_encoder.inverse_transform(test_predictions)\n","\n","# Save predictions\n","predictions_df = pd.DataFrame({\n","    'File Name': test_files,\n","    'Prediction': decoded_predictions\n","})\n","predictions_df.to_csv(output_file, index=False)\n","print(f\"Predictions saved to {output_file}\")\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":996},"id":"0Yisx48Vxy1I","executionInfo":{"status":"ok","timestamp":1736488767418,"user_tz":-330,"elapsed":16314,"user":{"displayName":"SHAHIDKHAN S 22ADR099","userId":"04241991466908434314"}},"outputId":"77d64333-7ff0-425c-e1d4-ae6c14ee1e30"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Train Accuracy: 0.5814\n","Test Accuracy: 0.4767\n","Classification Report:\n","              precision    recall  f1-score   support\n","\n","           C       0.00      0.00      0.00        11\n","           G       0.20      0.18      0.19        11\n","           N       0.64      0.78      0.71        46\n","           P       0.20      0.14      0.17         7\n","           R       0.20      0.18      0.19        11\n","\n","    accuracy                           0.48        86\n","   macro avg       0.25      0.26      0.25        86\n","weighted avg       0.41      0.48      0.44        86\n","\n"]},{"output_type":"display_data","data":{"text/plain":["<Figure size 1000x800 with 2 Axes>"],"image/png":"\n"},"metadata":{}},{"output_type":"stream","name":"stdout","text":["Predictions saved to /content/tamil_audio_predictions_pr_models.csv\n"]}]},{"cell_type":"code","source":["import os\n","import librosa\n","import zipfile\n","import numpy as np\n","import pandas as pd\n","from sklearn.preprocessing import LabelEncoder, StandardScaler\n","from sklearn.model_selection import train_test_split, GridSearchCV\n","from sklearn.linear_model import RidgeClassifier\n","from sklearn.metrics import accuracy_score, classification_report, confusion_matrix\n","import matplotlib.pyplot as plt\n","import seaborn as sns\n","\n","# Define the paths\n","train_zip_path = '/content/drive/MyDrive/Dravidian-2025/Tamil/Audio/Preprocessed Audio/tamil_train_audio_preprocessed4.zip'\n","train_extract_path = '/content/train_audio_preprocessed4'\n","test_zip_path = '/content/drive/MyDrive/Dravidian-2025/Tamil/Audio/Preprocessed Audio/tamil_finaled_test_audio_preprocessed4.zip'\n","test_extract_path = '/content/extracted_test_audio'\n","output_file = '/content/tamil_audio_predictions_ridge_classifier.csv'\n","\n","# Unzip train dataset\n","if not os.path.exists(train_extract_path):\n","    with zipfile.ZipFile(train_zip_path, 'r') as zip_ref:\n","        zip_ref.extractall(train_extract_path)\n","\n","# Unzip test dataset\n","if not os.path.exists(test_extract_path):\n","    with zipfile.ZipFile(test_zip_path, 'r') as zip_ref:\n","        zip_ref.extractall(test_extract_path)\n","\n","# Helper functions\n","def extract_class_from_file(file_name):\n","    \"\"\"Extracts class label from file name based on naming convention.\"\"\"\n","    parts = file_name.split('_')\n","    if len(parts) >= 4:\n","        class_label = parts[3]\n","        if class_label in ['G', 'P', 'R', 'C', 'N']:\n","            return class_label\n","    return None\n","\n","def extract_features(file_path):\n","    \"\"\"Extract audio features from a file.\"\"\"\n","    try:\n","        y, sr = librosa.load(file_path, sr=None)\n","        mfcc = librosa.feature.mfcc(y=y, sr=sr, n_mfcc=13)\n","        spectral_contrast = librosa.feature.spectral_contrast(y=y, sr=sr)\n","        features = np.concatenate((\n","            np.mean(mfcc, axis=1),\n","            np.mean(spectral_contrast, axis=1)\n","        ))\n","        return features\n","    except Exception as e:\n","        print(f\"Error processing file {file_path}: {e}\")\n","        return np.zeros(20)  # Return a zero vector if an error occurs\n","\n","# Load train files\n","train_files = os.listdir(train_extract_path)\n","labels, features = [], []\n","for file_name in train_files:\n","    if file_name.endswith('.wav'):\n","        file_path = os.path.join(train_extract_path, file_name)\n","        class_label = extract_class_from_file(file_name)\n","        if class_label:\n","            labels.append(class_label)\n","            features.append(extract_features(file_path))\n","\n","# Prepare dataset\n","X = np.array(features)\n","y = np.array(labels)\n","label_encoder = LabelEncoder()\n","y = label_encoder.fit_transform(y)\n","scaler = StandardScaler()\n","X = scaler.fit_transform(X)\n","\n","# Train-test split\n","X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, stratify=y, random_state=42)\n","\n","# Hyperparameter grid for RidgeClassifier\n","param_grid = {\n","    'alpha': [0.1, 1, 10],  # Regularization strength\n","}\n","\n","# Ridge Classifier\n","ridge = RidgeClassifier()\n","grid_search = GridSearchCV(ridge, param_grid, cv=3, scoring='accuracy', n_jobs=-1)\n","grid_search.fit(X_train, y_train)\n","best_ridge_model = grid_search.best_estimator_\n","\n","# Evaluate model\n","y_train_pred = best_ridge_model.predict(X_train)\n","y_test_pred = best_ridge_model.predict(X_test)\n","print(f\"Train Accuracy: {accuracy_score(y_train, y_train_pred):.4f}\")\n","print(f\"Test Accuracy: {accuracy_score(y_test, y_test_pred):.4f}\")\n","print(\"Classification Report:\")\n","print(classification_report(y_test, y_test_pred, target_names=label_encoder.classes_))\n","\n","# Confusion matrix\n","conf_matrix = confusion_matrix(y_test, y_test_pred)\n","plt.figure(figsize=(10, 8))\n","sns.heatmap(conf_matrix, annot=True, fmt='d', cmap='Blues', xticklabels=label_encoder.classes_, yticklabels=label_encoder.classes_)\n","plt.title(\"Confusion Matrix\")\n","plt.xlabel(\"Predicted\")\n","plt.ylabel(\"Actual\")\n","plt.show()\n","\n","# Load test files for final predictions\n","final_features = []\n","test_files = os.listdir(test_extract_path)\n","for file_name in test_files:\n","    if file_name.endswith('.wav'):\n","        file_path = os.path.join(test_extract_path, file_name)\n","        final_features.append(extract_features(file_path))\n","\n","X_test_final = np.array(final_features)\n","X_test_final = scaler.transform(X_test_final)\n","\n","# Predict on test data\n","test_predictions = best_ridge_model.predict(X_test_final)\n","decoded_predictions = label_encoder.inverse_transform(test_predictions)\n","\n","# Save predictions\n","predictions_df = pd.DataFrame({\n","    'File Name': test_files,\n","    'Prediction': decoded_predictions\n","})\n","predictions_df.to_csv(output_file, index=False)\n","print(f\"Predictions saved to {output_file}\")"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":996},"id":"TMmL1v8dzVCy","executionInfo":{"status":"ok","timestamp":1736489269851,"user_tz":-330,"elapsed":12462,"user":{"displayName":"SHAHIDKHAN S 22ADR099","userId":"04241991466908434314"}},"outputId":"e12f3382-7508-4e3d-e4a7-c8fdfaa2f5be"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Train Accuracy: 0.6163\n","Test Accuracy: 0.5698\n","Classification Report:\n","              precision    recall  f1-score   support\n","\n","           C       0.00      0.00      0.00        11\n","           G       0.33      0.18      0.24        11\n","           N       0.67      0.87      0.75        46\n","           P       0.00      0.00      0.00         7\n","           R       0.44      0.64      0.52        11\n","\n","    accuracy                           0.57        86\n","   macro avg       0.29      0.34      0.30        86\n","weighted avg       0.46      0.57      0.50        86\n","\n"]},{"output_type":"display_data","data":{"text/plain":["<Figure size 1000x800 with 2 Axes>"],"image/png":"iVBORw0KGgoAAAANSUhEUgAAAwwAAAK9CAYAAACJnusfAAAAOnRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjEwLjAsIGh0dHBzOi8vbWF0cGxvdGxpYi5vcmcvlHJYcgAAAAlwSFlzAAAPYQAAD2EBqD+naQAAVeFJREFUeJzt3Xd4VGX+/vF7EpJJCCQhoQSkEwwdFJSmSO9Is2BZAVEBURGwhVVpSmgKUsUVASni0qIoghQJugIiRRCBpYouhBJ6CJOQmd8f/sh3juFIBic5Seb92utc1+aZM+d8MnPNmA/385xjc7lcLgEAAADADfhZXQAAAACA3IuGAQAAAIApGgYAAAAApmgYAAAAAJiiYQAAAABgioYBAAAAgCkaBgAAAACmaBgAAAAAmKJhAAAAAGCKhgEAbuDAgQNq3bq1wsLCZLPZFB8f79XjHz16VDabTXPmzPHqcfOypk2bqmnTplaXAQD4ExoGALnWoUOH1LdvX1WsWFFBQUEKDQ1V48aN9d577yklJSVbz92zZ0/t3r1bb7/9tubNm6d69epl6/lyUq9evWSz2RQaGnrD1/HAgQOy2Wyy2WyaMGGCx8c/fvy4hg8frp07d3qhWgCA1QpYXQAA3MiXX36pBx98UHa7XU888YRq1Kih1NRUfffdd3r55Ze1Z88effDBB9ly7pSUFG3atEn//Oc/9dxzz2XLOcqVK6eUlBQFBARky/FvpkCBArpy5YpWrFihhx56yPDYggULFBQUpKtXr97SsY8fP64RI0aofPnyqlOnTpaf9/XXX9/S+QAA2YuGAUCuc+TIEfXo0UPlypXT+vXrVbJkyYzHBgwYoIMHD+rLL7/MtvOfPn1akhQeHp5t57DZbAoKCsq249+M3W5X48aN9cknn2RqGBYuXKgOHTpo6dKlOVLLlStXVLBgQQUGBubI+QAAnmFKEoBcZ9y4cbp8+bJmzZplaBaui46O1sCBAzN+vnbtmkaNGqVKlSrJbrerfPnyGjp0qBwOh+F55cuXV8eOHfXdd9/p7rvvVlBQkCpWrKiPP/44Y5/hw4erXLlykqSXX35ZNptN5cuXl/THVJ7r/9/d8OHDZbPZDGNr1qzRPffco/DwcBUqVEgxMTEaOnRoxuNmaxjWr1+ve++9VyEhIQoPD1fnzp21d+/eG57v4MGD6tWrl8LDwxUWFqbevXvrypUr5i/snzz66KP66quvdP78+YyxrVu36sCBA3r00Ucz7X/27Fm99NJLqlmzpgoVKqTQ0FC1a9dOP/30U8Y+GzZs0F133SVJ6t27d8bUpuu/Z9OmTVWjRg1t27ZNTZo0UcGCBTNelz+vYejZs6eCgoIy/f5t2rRRkSJFdPz48Sz/rgCAW0fDACDXWbFihSpWrKhGjRplaf+nnnpKb775pu68805NnDhR9913n+Li4tSjR49M+x48eFAPPPCAWrVqpXfeeUdFihRRr169tGfPHklSt27dNHHiREnSI488onnz5mnSpEke1b9nzx517NhRDodDI0eO1DvvvKP7779f//nPf/7yeWvXrlWbNm106tQpDR8+XIMHD9b333+vxo0b6+jRo5n2f+ihh3Tp0iXFxcXpoYce0pw5czRixIgs19mtWzfZbDYtW7YsY2zhwoWqUqWK7rzzzkz7Hz58WPHx8erYsaPeffddvfzyy9q9e7fuu+++jD/eq1atqpEjR0qSnnnmGc2bN0/z5s1TkyZNMo6TlJSkdu3aqU6dOpo0aZKaNWt2w/ree+89FStWTD179lR6erokaebMmfr66681ZcoUlSpVKsu/KwDgb3ABQC5y4cIFlyRX586ds7T/zp07XZJcTz31lGH8pZdecklyrV+/PmOsXLlyLkmujRs3ZoydOnXKZbfbXUOGDMkYO3LkiEuSa/z48YZj9uzZ01WuXLlMNQwbNszl/nU6ceJElyTX6dOnTeu+fo7Zs2dnjNWpU8dVvHhxV1JSUsbYTz/95PLz83M98cQTmc735JNPGo7ZtWtXV2RkpOk53X+PkJAQl8vlcj3wwAOuFi1auFwulys9Pd0VFRXlGjFixA1fg6tXr7rS09Mz/R52u901cuTIjLGtW7dm+t2uu++++1ySXO+///4NH7vvvvsMY6tXr3ZJcr311luuw4cPuwoVKuTq0qXLTX9HAID3kDAAyFUuXrwoSSpcuHCW9l+5cqUkafDgwYbxIUOGSFKmtQ7VqlXTvffem/FzsWLFFBMTo8OHD99yzX92fe3DZ599JqfTmaXnnDhxQjt37lSvXr0UERGRMV6rVi21atUq4/d0169fP8PP9957r5KSkjJew6x49NFHtWHDBiUmJmr9+vVKTEy84XQk6Y91D35+f/xnIz09XUlJSRnTrbZv357lc9rtdvXu3TtL+7Zu3Vp9+/bVyJEj1a1bNwUFBWnmzJlZPhcA4O+jYQCQq4SGhkqSLl26lKX9f/31V/n5+Sk6OtowHhUVpfDwcP3666+G8bJly2Y6RpEiRXTu3LlbrDizhx9+WI0bN9ZTTz2lEiVKqEePHvr3v//9l83D9TpjYmIyPVa1alWdOXNGycnJhvE//y5FihSRJI9+l/bt26tw4cL69NNPtWDBAt11112ZXsvrnE6nJk6cqMqVK8tut6to0aIqVqyYdu3apQsXLmT5nLfddptHC5wnTJigiIgI7dy5U5MnT1bx4sWz/FwAwN9HwwAgVwkNDVWpUqX0888/e/S8Py86NuPv73/DcZfLdcvnuD6//rrg4GBt3LhRa9eu1T/+8Q/t2rVLDz/8sFq1apVp37/j7/wu19ntdnXr1k1z587V8uXLTdMFSRo9erQGDx6sJk2aaP78+Vq9erXWrFmj6tWrZzlJkf54fTyxY8cOnTp1SpK0e/duj54LAPj7aBgA5DodO3bUoUOHtGnTppvuW65cOTmdTh04cMAwfvLkSZ0/fz7jikfeUKRIEcMVha77c4ohSX5+fmrRooXeffdd/fLLL3r77be1fv16ffPNNzc89vU69+/fn+mxffv2qWjRogoJCfl7v4CJRx99VDt27NClS5duuFD8uiVLlqhZs2aaNWuWevToodatW6tly5aZXpOsNm9ZkZycrN69e6tatWp65plnNG7cOG3dutVrxwcA3BwNA4Bc55VXXlFISIieeuopnTx5MtPjhw4d0nvvvSfpjyk1kjJdyejdd9+VJHXo0MFrdVWqVEkXLlzQrl27MsZOnDih5cuXG/Y7e/Zspudev4HZny/1el3JkiVVp04dzZ071/AH+M8//6yvv/464/fMDs2aNdOoUaM0depURUVFme7n7++fKb1YvHix/ve//xnGrjc2N2quPPXqq6/q2LFjmjt3rt59912VL19ePXv2NH0dAQDex43bAOQ6lSpV0sKFC/Xwww+ratWqhjs9f//991q8eLF69eolSapdu7Z69uypDz74QOfPn9d9992nH374QXPnzlWXLl1ML9l5K3r06KFXX31VXbt21QsvvKArV65oxowZuv322w2LfkeOHKmNGzeqQ4cOKleunE6dOqXp06erdOnSuueee0yPP378eLVr104NGzZUnz59lJKSoilTpigsLEzDhw/32u/xZ35+fnr99ddvul/Hjh01cuRI9e7dW40aNdLu3bu1YMECVaxY0bBfpUqVFB4ervfff1+FCxdWSEiI6tevrwoVKnhU1/r16zV9+nQNGzYs4zKvs2fPVtOmTfXGG29o3LhxHh0PAHBrSBgA5Er333+/du3apQceeECfffaZBgwYoNdee01Hjx7VO++8o8mTJ2fs++GHH2rEiBHaunWrXnzxRa1fv16xsbFatGiRV2uKjIzU8uXLVbBgQb3yyiuaO3eu4uLi1KlTp0y1ly1bVh999JEGDBigadOmqUmTJlq/fr3CwsJMj9+yZUutWrVKkZGRevPNNzVhwgQ1aNBA//nPfzz+Yzs7DB06VEOGDNHq1as1cOBAbd++XV9++aXKlClj2C8gIEBz586Vv7+/+vXrp0ceeUQJCQkenevSpUt68skndccdd+if//xnxvi9996rgQMH6p133tHmzZu98nsBAP6azeXJ6jgAAAAAPoWEAQAAAIApGgYAAAAApmgYAAAAAJiiYQAAAADyuDFjxshms+nFF1/MGLt69aoGDBigyMhIFSpUSN27d7/h5cpvhoYBAAAAyMO2bt2qmTNnqlatWobxQYMGacWKFVq8eLESEhJ0/PhxdevWzePj0zAAAAAAedTly5f12GOP6V//+peKFCmSMX7hwgXNmjVL7777rpo3b666detq9uzZ+v777z2+LDUNAwAAAJBLOBwOXbx40bD91d3tBwwYoA4dOqhly5aG8W3btiktLc0wXqVKFZUtW1abNm3yqKZ8eafnq9esrgBAdjl8KtnqEpCDKhYPsboE5KAzl1KtLgE5qHSRQKtLMBV8x3OWnfvVzkU1YsQIw9iwYcM0fPjwTPsuWrRI27dv19atWzM9lpiYqMDAQIWHhxvGS5QoocTERI9qypcNAwAAAJAXxcbGavDgwYYxu92eab/ffvtNAwcO1Jo1axQUFJStNdEwAAAAAO5s1s3at9vtN2wQ/mzbtm06deqU7rzzzoyx9PR0bdy4UVOnTtXq1auVmpqq8+fPG1KGkydPKioqyqOaaBgAAACAPKZFixbavXu3Yax3796qUqWKXn31VZUpU0YBAQFat26dunfvLknav3+/jh07poYNG3p0LhoGAAAAII8pXLiwatSoYRgLCQlRZGRkxnifPn00ePBgRUREKDQ0VM8/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n5s2baoXX3wxx+vYsGGDbDabzp8/n+PnBgDkHjQMAJBFvXr1ks1mk81mU2BgoKKjozVy5Ehdu3YtW8+7bNkyjRo1Kkv78kc+AMDbClhdAADkJW3bttXs2bPlcDi0cuVKDRgwQAEBAYqNjTXsl5qaqsDAQK+cMyIiwivHAQDgVpAwAIAH7Ha7oqKiVK5cOfXv318tW7bU559/njGN6O2331apUqUUExMjSfrtt9/00EMPKTw8XBEREercubOOHj2acbz09HQNHjxY4eHhioyM1CuvvCKXy2U455+nJDkcDr366qsqU6aM7Ha7oqOjNWvWLB09elTNmjWTJBUpUkQ2m029evWSJDmdTsXFxalChQoKDg5W7dq1tWTJEsN5Vq5cqdtvv13BwcFq1qyZoU4AgO+iYQCAvyE4OFipqamSpHXr1mn//v1as2aNvvjiC6WlpalNmzYqXLiwvv32W/3nP/9RoUKF1LZt24znvPPOO5ozZ44++ugjfffddzp79qyWL1/+l+d84okn9Mknn2jy5Mnau3evZs6cqUKFCqlMmTJaunSpJGn//v06ceKE3nvvPUlSXFycPv74Y73//vvas2ePBg0apMcff1wJCQmS/mhsunXrpk6dOmnnzp166qmn9Nprr2XXywYAyEOYkgQAt8DlcmndunVavXq1nn/+eZ0+fVohISH68MMPM6YizZ8/X06nUx9++KFsNpskafbs2QoPD9eGDRvUunVrTZo0SbGxserWrZsk6f3339fq1atNz/vf//5X//73v7VmzRq1bNlSklSxYsWMx69PXypevLjCw8Ml/ZFIjB49WmvXrlXDhg0znvPdd99p5syZuu+++zRjxgxVqlRJ77zzjiQpJiZGu3fv1tixY734qgEA8iIaBgDwwBdffKFChQopLS1NTqdTjz76qIYPH64BAwaoZs2ahnULP/30kw4ePKjChQsbjnH16lUdOnRIFy5c0IkTJ1S/fv2MxwoUKKB69eplmpZ03c6dO+Xv76/77rsvyzUfPHhQV65cUatWrQzjqampuuOOOyRJe/fuNdQhKaO5AAD4NhoGAPBAs2bNNGPGDAUGBqpUqVIqUOD/vkZDQkIM+16+fFl169bVggULMh2nWLFit3T+4OBgj59z+fJlSdKXX36p2267zfCY3W6/pToAAL6DhgEAPBASEqLo6Ogs7XvnnXfq008/VfHixRUaGnrDfUqWLKktW7aoSZMmkqRr165p27ZtuvPOO2+4f82aNeV0OpWQkJAxJcnd9YQjPT09Y6xatWqy2+06duyYaTJRtWpVff7554axzZs33/yXBADkeyx6BoBs8thjj6lo0aLq3Lmzvv32Wx05ckQbNmzQCy+8oN9//12SNHDgQI0ZM0bx8fHat2+fnn322b+8h0L58uXVs2dPPfnkk4qPj8845r///W9JUrly5WSz2fTFF1/o9OnTunz5sgoXLqyXXnpJgwYN0ty5c3Xo0CFt375dU6ZM0dy5cyVJ/fr104EDB/Tyyy9r//79WrhwoebMmZPdLxEAIA+gYQCAbFKwYEFt3LhRZcuWVbdu3VS1alX16dNHV69ezUgchgwZon/84x/q2bOnGjZsqMKFC6tr165/edwZM2bogQce0LPPPqsqVaro6aefVnJysiTptttu04gRI/Taa6+pRIkSeu655yRJo0aN0htvvKG4uDhVrVpVbdu21ZdffqkKFSpIksqWLaulS5cqPj5etWvX1vvvv6/Ro0dn46sDAMgrbC6zlXUAAAAAfB4JAwAAAABTNAwAAAAATNEwAAAAADBFwwAAAADAFA0DAAAAAFM0DAAAAABM0TAAAAAAMEXDAAAAAMAUDQMAAAAAUzQMAAAAAEzRMAAAAAAw9f8Ae5AxblVt7yQAAAAASUVORK5CYII=\n"},"metadata":{}},{"output_type":"stream","name":"stdout","text":["Predictions saved to /content/tamil_audio_predictions_ridge_classifier.csv\n"]}]}]}